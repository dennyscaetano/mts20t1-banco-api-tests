{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2025-07-07T17:52:12.077Z",
    "end": "2025-07-07T17:52:12.159Z",
    "duration": 82,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "48a449e6-cd38-45eb-a703-da9da5556615",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0e8b5be-1327-4375-9e65-c514fbd6fab8",
          "title": "Login",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-banco-api-tests/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad7ecaa0-3509-4e79-91d8-711b41e7bf18",
              "title": "POST /login",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-banco-api-tests/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 com token em string quando usar credenciais válidas",
                  "fullTitle": "Login POST /login Deve retornar 200 com token em string quando usar credenciais válidas",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'julio.lima',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.token).to.be.a('string');",
                  "err": {},
                  "uuid": "d7f6b71d-58c6-4ff9-88da-2e2e1a7e2477",
                  "parentUUID": "ad7ecaa0-3509-4e79-91d8-711b41e7bf18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando não for passado parâmetro username",
                  "fullTitle": "Login POST /login Deve retornar 400 quando não for passado parâmetro username",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.error).to.equal('Usuário e senha são obrigatórios.');",
                  "err": {},
                  "uuid": "8c6db362-8553-4a0c-93bb-a34f9c614b8d",
                  "parentUUID": "ad7ecaa0-3509-4e79-91d8-711b41e7bf18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando não for passado parâmetro senha",
                  "fullTitle": "Login POST /login Deve retornar 400 quando não for passado parâmetro senha",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'junior.lima'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.error).to.equal('Usuário e senha são obrigatórios.');",
                  "err": {},
                  "uuid": "7a631432-7386-4a90-9032-e425ba284d45",
                  "parentUUID": "ad7ecaa0-3509-4e79-91d8-711b41e7bf18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 401 quando for passado credenciais inválidas",
                  "fullTitle": "Login POST /login Deve retornar 401 quando for passado credenciais inválidas",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'credenciais.inválidas',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.error).to.equal('Usuário ou senha inválidos.');",
                  "err": {},
                  "uuid": "b538149d-0d95-429b-9a6a-3328b765e9a9",
                  "parentUUID": "ad7ecaa0-3509-4e79-91d8-711b41e7bf18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7f6b71d-58c6-4ff9-88da-2e2e1a7e2477",
                "8c6db362-8553-4a0c-93bb-a34f9c614b8d",
                "7a631432-7386-4a90-9032-e425ba284d45",
                "b538149d-0d95-429b-9a6a-3328b765e9a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 200000
            },
            {
              "uuid": "a2cc3a09-efef-4df2-8189-b64db1179b66",
              "title": "OTHER VERBS /login",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-banco-api-tests/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 405 quando tentar utilizar verbo GET em /login",
                  "fullTitle": "Login OTHER VERBS /login Deve retornar 405 quando tentar utilizar verbo GET em /login",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .get('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'julio.lima',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(405);\nexpect(resposta.body.error).to.equal('Método não permitido.');",
                  "err": {},
                  "uuid": "75ceaf5a-a1ce-48a5-ab27-85e3ce73e84c",
                  "parentUUID": "a2cc3a09-efef-4df2-8189-b64db1179b66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 405 quando tentar utilizar verbo PUT em /login",
                  "fullTitle": "Login OTHER VERBS /login Deve retornar 405 quando tentar utilizar verbo PUT em /login",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .put('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'julio.lima',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(405);\nexpect(resposta.body.error).to.equal('Método não permitido.');",
                  "err": {},
                  "uuid": "b0a113df-f343-438e-9138-4ced205c2b99",
                  "parentUUID": "a2cc3a09-efef-4df2-8189-b64db1179b66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 405 quando tentar utilizar verbo PATCH em /login",
                  "fullTitle": "Login OTHER VERBS /login Deve retornar 405 quando tentar utilizar verbo PATCH em /login",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .patch('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'julio.lima',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(405);\nexpect(resposta.body.error).to.equal('Método não permitido.');",
                  "err": {},
                  "uuid": "0335b19e-83b1-4e5b-92b2-cfc9b1f19cc3",
                  "parentUUID": "a2cc3a09-efef-4df2-8189-b64db1179b66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 405 quando tentar utilizar verbo DELETE em /login",
                  "fullTitle": "Login OTHER VERBS /login Deve retornar 405 quando tentar utilizar verbo DELETE em /login",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .delete('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'julio.lima',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(405);\nexpect(resposta.body.error).to.equal('Método não permitido.');",
                  "err": {},
                  "uuid": "3ccd7c18-c3e1-4dd4-ae65-a343ff019bd2",
                  "parentUUID": "a2cc3a09-efef-4df2-8189-b64db1179b66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 405 quando tentar utilizar verbo OPTIONS em /login",
                  "fullTitle": "Login OTHER VERBS /login Deve retornar 405 quando tentar utilizar verbo OPTIONS em /login",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .options('/login')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': 'julio.lima',\n        'senha': '123456'\n    })\n// console.log(resposta.status)\n// console.log(resposta.body)\nexpect(resposta.status).to.equal(405);\nexpect(resposta.body.error).to.equal('Método não permitido.');",
                  "err": {},
                  "uuid": "5e893be5-675c-424b-bb66-6799d068b0e5",
                  "parentUUID": "a2cc3a09-efef-4df2-8189-b64db1179b66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75ceaf5a-a1ce-48a5-ab27-85e3ce73e84c",
                "b0a113df-f343-438e-9138-4ced205c2b99",
                "0335b19e-83b1-4e5b-92b2-cfc9b1f19cc3",
                "3ccd7c18-c3e1-4dd4-ae65-a343ff019bd2",
                "5e893be5-675c-424b-bb66-6799d068b0e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 200000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 200000
        },
        {
          "uuid": "22cd5cbb-2f3d-4b6e-aad5-fd511dea8d2e",
          "title": "Transferências",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-banco-api-tests/test/transferencia.test.js",
          "file": "/test/transferencia.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05c160e3-05ab-4e2b-979a-73bab025a32e",
              "title": "POST /transferencias",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-banco-api-tests/test/transferencia.test.js",
              "file": "/test/transferencia.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 201 quando tiver sucesso",
                  "fullTitle": "Transferências POST /transferencias Deve retornar 201 quando tiver sucesso",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/transferencias')\n    .set('Content-Type', 'application/json')\n    .send({\n        'contaOrigem': 1,\n        'contaDestino': 2,\n        'valor': 137.59,\n        'token': '123456'\n        })\nconsole.log(resposta.status)\nconsole.log(resposta.body)\n\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body.message).to.be.equal('Transferência realizada com sucesso.');",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 201",
                    "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (test/transferencia.test.js:20:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 401\n+ 201\n"
                  },
                  "uuid": "e8d39074-96df-4aa4-81b9-ec4cfda9a2ab",
                  "parentUUID": "05c160e3-05ab-4e2b-979a-73bab025a32e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e8d39074-96df-4aa4-81b9-ec4cfda9a2ab"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 200000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 200000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 200000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}